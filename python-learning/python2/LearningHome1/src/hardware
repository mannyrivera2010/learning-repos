import ctypes
import platform
import os

class SysInfo:

    def __init__(self):

        self.totalRam, self.availRam = self.ram()
        self.totalRam = self.totalRam / (1048576)
        self.availRam = self.availRam / (1048576)



    def ram(self):
        try:
            kernel32 = ctypes.windll.kernel32
            c_ulong = ctypes.c_ulong
            class MEMORYSTATUS(ctypes.Structure):
                _fields_ = [
                    ('dwLength', c_ulong),
                    ('dwMemoryLoad', c_ulong),
                    ('dwTotalPhys', c_ulong),
                    ('dwAvailPhys', c_ulong),
                    ('dwTotalPageFile', c_ulong),
                    ('dwAvailPageFile', c_ulong),
                    ('dwTotalVirtual', c_ulong),
                    ('dwAvailVirtual', c_ulong)
                ]
    
            memoryStatus = MEMORYSTATUS()
            memoryStatus.dwLength = ctypes.sizeof(MEMORYSTATUS)
            kernel32.GlobalMemoryStatus(ctypes.byref(memoryStatus))
            return (memoryStatus.dwTotalPhys, memoryStatus.dwAvailPhys)
        except:
            print "No ram found"




       
if __name__ == "__main__":
        sys = SysInfo()
        print "System Memory : %dMb total" % sys.totalRam
        print "Available System Memory  : %dMb free" % sys.availRam
        byteformat = "GB"
        drive = raw_input("Enter drive:")
        space,size =  sys.get_free_space(drive+":", byteformat)
        print space,size